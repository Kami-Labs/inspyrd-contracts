/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackerContract,
  AttackerContractInterface,
} from "../AttackerContract";

const _abi = [
  {
    inputs: [],
    name: "balanceOfContract",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc721",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_token",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "bidOnAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_auctionContract",
        type: "address",
      },
    ],
    name: "setAuctionContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_req",
        type: "bool",
      },
    ],
    name: "setRequire",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFailed",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610479806100206000396000f3fe6080604052600436106100745760003560e01c806367b2cd051161004e57806367b2cd051461019b578063d0e30db0146101a3578063e6c7c456146101ab578063ea46d76c146101d357600080fd5b8063023924c71461010e578063269f5e7e146101585780633ccfd60b1461018657600080fd5b36610109573460008082825461008a91906103aa565b909155505060055460ff166100f05760405162461bcd60e51b815260206004820152602260248201527f4361757365206661696c75726520746f20626c6f636b206e657874206269646460448201526132b960f11b606482015260840160405180910390fd5b600554610100900460ff16610107576101076101f3565b005b600080fd5b34801561011a57600080fd5b506101076101293660046103de565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b34801561016457600080fd5b50610107610173366004610400565b6005805460ff1916911515919091179055565b34801561019257600080fd5b506101076101f3565b610107610261565b6101076102b6565b3480156101b757600080fd5b506101c160005481565b60405190815260200160405180910390f35b3480156101df57600080fd5b506101076101ee366004610422565b6102ce565b600154600354600254604051634cb8ef5b60e01b81526001600160a01b0392831660048201526024810191909152911690634cb8ef5b90604401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b50505050565b6005805461ff00191661010017905560015460408051632dab5a4560e21b815290516001600160a01b039092169163b6ad69149160048082019260009290919082900301818387803b15801561024757600080fd5b346000808282546102c791906103aa565b9091555050565b600154604051633093569760e21b81526001600160a01b0385811660048301526024820185905260006044830181905260648301529091169063c24d5a5c9083906084016000604051808303818588803b15801561032b57600080fd5b505af115801561033f573d6000803e3d6000fd5b50506003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790555050506002829055600481905560008054829190819061038a908490610455565b9091555050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156103bd576103bd610394565b500190565b80356001600160a01b03811681146103d957600080fd5b919050565b6000602082840312156103f057600080fd5b6103f9826103c2565b9392505050565b60006020828403121561041257600080fd5b813580151581146103f957600080fd5b60008060006060848603121561043757600080fd5b610440846103c2565b95602085013595506040909401359392505050565b60008282101561046757610467610394565b50039056fea164736f6c634300080b000a";

type AttackerContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackerContract__factory extends ContractFactory {
  constructor(...args: AttackerContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AttackerContract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AttackerContract> {
    return super.deploy(overrides || {}) as Promise<AttackerContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AttackerContract {
    return super.attach(address) as AttackerContract;
  }
  connect(signer: Signer): AttackerContract__factory {
    return super.connect(signer) as AttackerContract__factory;
  }
  static readonly contractName: "AttackerContract";
  public readonly contractName: "AttackerContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerContractInterface {
    return new utils.Interface(_abi) as AttackerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackerContract {
    return new Contract(address, _abi, signerOrProvider) as AttackerContract;
  }
}
