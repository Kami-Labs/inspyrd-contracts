/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NFTAuctionInterface extends utils.Interface {
  contractName: "NFTAuction";
  functions: {
    "createNewNftAuction(address,uint256,address,uint128,uint128,uint32,uint32,address[],uint32[])": FunctionFragment;
    "defaultAuctionBidPeriod()": FunctionFragment;
    "defaultBidIncreasePercentage()": FunctionFragment;
    "makeBid(address,uint256,address,uint128)": FunctionFragment;
    "makeCustomBid(address,uint256,address,uint128,address)": FunctionFragment;
    "maximumMinPricePercentage()": FunctionFragment;
    "minimumBidPercentage()": FunctionFragment;
    "nftAuctions(address,uint256)": FunctionFragment;
    "ownerOfNFT(address,uint256)": FunctionFragment;
    "settleAuction(address,uint256)": FunctionFragment;
    "takeHighestBid(address,uint256)": FunctionFragment;
    "withdrawAllFailedCredits()": FunctionFragment;
    "withdrawAuction(address,uint256)": FunctionFragment;
    "withdrawBid(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewNftAuction",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAuctionBidPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBidIncreasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCustomBid",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumMinPricePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumBidPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAuctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeHighestBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFailedCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewNftAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAuctionBidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBidIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCustomBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumMinPricePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumBidPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOfNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFailedCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;

  events: {
    "AuctionPeriodUpdated(address,uint256,uint64)": EventFragment;
    "AuctionSettled(address,uint256,address)": EventFragment;
    "AuctionWithdrawn(address,uint256,address)": EventFragment;
    "BidMade(address,uint256,address,uint256,address,uint256)": EventFragment;
    "BidWithdrawn(address,uint256,address)": EventFragment;
    "HighestBidTaken(address,uint256)": EventFragment;
    "NFTTransferredAndSellerPaid(address,uint256,address,uint128,address,address)": EventFragment;
    "NftAuctionCreated(address,uint256,address,address,uint128,uint128,uint32,uint32,address[],uint32[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidTaken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NFTTransferredAndSellerPaid"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftAuctionCreated"): EventFragment;
}

export type AuctionPeriodUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    auctionEndPeriod: BigNumber;
  }
>;

export type AuctionPeriodUpdatedEventFilter =
  TypedEventFilter<AuctionPeriodUpdatedEvent>;

export type AuctionSettledEvent = TypedEvent<
  [string, BigNumber, string],
  { nftContractAddress: string; tokenId: BigNumber; auctionSettler: string }
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export type AuctionWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  { nftContractAddress: string; tokenId: BigNumber; nftOwner: string }
>;

export type AuctionWithdrawnEventFilter =
  TypedEventFilter<AuctionWithdrawnEvent>;

export type BidMadeEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    bidder: string;
    ethAmount: BigNumber;
    erc20Token: string;
    tokenAmount: BigNumber;
  }
>;

export type BidMadeEventFilter = TypedEventFilter<BidMadeEvent>;

export type BidWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  { nftContractAddress: string; tokenId: BigNumber; highestBidder: string }
>;

export type BidWithdrawnEventFilter = TypedEventFilter<BidWithdrawnEvent>;

export type HighestBidTakenEvent = TypedEvent<
  [string, BigNumber],
  { nftContractAddress: string; tokenId: BigNumber }
>;

export type HighestBidTakenEventFilter = TypedEventFilter<HighestBidTakenEvent>;

export type NFTTransferredAndSellerPaidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftSeller: string;
    nftHighestBid: BigNumber;
    nftHighestBidder: string;
    nftRecipient: string;
  }
>;

export type NFTTransferredAndSellerPaidEventFilter =
  TypedEventFilter<NFTTransferredAndSellerPaidEvent>;

export type NftAuctionCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    string[],
    number[]
  ],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftSeller: string;
    erc20Token: string;
    minPrice: BigNumber;
    buyNowPrice: BigNumber;
    auctionBidPeriod: number;
    bidIncreaseRate: number;
    feeRecipients: string[];
    feePercentages: number[];
  }
>;

export type NftAuctionCreatedEventFilter =
  TypedEventFilter<NftAuctionCreatedEvent>;

export interface NFTAuction extends BaseContract {
  contractName: "NFTAuction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      _feeRecipients: string[],
      _feePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<[number]>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<[number]>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<[number]>;

    minimumBidPercentage(overrides?: CallOverrides): Promise<[number]>;

    nftAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        bidIncreaseRate: number;
        auctionBidPeriod: number;
        auctionEnd: BigNumber;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftSeller: string;
        nftRecipient: string;
        ERC20Token: string;
      }
    >;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNewNftAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _erc20Token: string,
    _minPrice: BigNumberish,
    _buyNowPrice: BigNumberish,
    _auctionBidPeriod: BigNumberish,
    _bidIncreasePercentage: BigNumberish,
    _feeRecipients: string[],
    _feePercentages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<number>;

  defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

  makeBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _erc20Token: string,
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeCustomBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _erc20Token: string,
    _tokenAmount: BigNumberish,
    _nftRecipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumMinPricePercentage(overrides?: CallOverrides): Promise<number>;

  minimumBidPercentage(overrides?: CallOverrides): Promise<number>;

  nftAuctions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      bidIncreaseRate: number;
      auctionBidPeriod: number;
      auctionEnd: BigNumber;
      minPrice: BigNumber;
      buyNowPrice: BigNumber;
      nftHighestBid: BigNumber;
      nftHighestBidder: string;
      nftSeller: string;
      nftRecipient: string;
      ERC20Token: string;
    }
  >;

  ownerOfNFT(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  settleAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeHighestBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllFailedCredits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      _feeRecipients: string[],
      _feePercentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<number>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      _nftRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<number>;

    minimumBidPercentage(overrides?: CallOverrides): Promise<number>;

    nftAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        bidIncreaseRate: number;
        auctionBidPeriod: number;
        auctionEnd: BigNumber;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftSeller: string;
        nftRecipient: string;
        ERC20Token: string;
      }
    >;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllFailedCredits(overrides?: CallOverrides): Promise<void>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionPeriodUpdated(address,uint256,uint64)"(
      nftContractAddress?: null,
      tokenId?: null,
      auctionEndPeriod?: null
    ): AuctionPeriodUpdatedEventFilter;
    AuctionPeriodUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      auctionEndPeriod?: null
    ): AuctionPeriodUpdatedEventFilter;

    "AuctionSettled(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      auctionSettler?: null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      nftContractAddress?: null,
      tokenId?: null,
      auctionSettler?: null
    ): AuctionSettledEventFilter;

    "AuctionWithdrawn(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): AuctionWithdrawnEventFilter;
    AuctionWithdrawn(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): AuctionWithdrawnEventFilter;

    "BidMade(address,uint256,address,uint256,address,uint256)"(
      nftContractAddress?: null,
      tokenId?: null,
      bidder?: null,
      ethAmount?: null,
      erc20Token?: null,
      tokenAmount?: null
    ): BidMadeEventFilter;
    BidMade(
      nftContractAddress?: null,
      tokenId?: null,
      bidder?: null,
      ethAmount?: null,
      erc20Token?: null,
      tokenAmount?: null
    ): BidMadeEventFilter;

    "BidWithdrawn(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      highestBidder?: null
    ): BidWithdrawnEventFilter;
    BidWithdrawn(
      nftContractAddress?: null,
      tokenId?: null,
      highestBidder?: null
    ): BidWithdrawnEventFilter;

    "HighestBidTaken(address,uint256)"(
      nftContractAddress?: null,
      tokenId?: null
    ): HighestBidTakenEventFilter;
    HighestBidTaken(
      nftContractAddress?: null,
      tokenId?: null
    ): HighestBidTakenEventFilter;

    "NFTTransferredAndSellerPaid(address,uint256,address,uint128,address,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      nftHighestBid?: null,
      nftHighestBidder?: null,
      nftRecipient?: null
    ): NFTTransferredAndSellerPaidEventFilter;
    NFTTransferredAndSellerPaid(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      nftHighestBid?: null,
      nftHighestBidder?: null,
      nftRecipient?: null
    ): NFTTransferredAndSellerPaidEventFilter;

    "NftAuctionCreated(address,uint256,address,address,uint128,uint128,uint32,uint32,address[],uint32[])"(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      erc20Token?: null,
      minPrice?: null,
      buyNowPrice?: null,
      auctionBidPeriod?: null,
      bidIncreaseRate?: null,
      feeRecipients?: null,
      feePercentages?: null
    ): NftAuctionCreatedEventFilter;
    NftAuctionCreated(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      erc20Token?: null,
      minPrice?: null,
      buyNowPrice?: null,
      auctionBidPeriod?: null,
      bidIncreaseRate?: null,
      feeRecipients?: null,
      feePercentages?: null
    ): NftAuctionCreatedEventFilter;
  };

  estimateGas: {
    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      _feeRecipients: string[],
      _feePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBidPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      _feeRecipients: string[],
      _feePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultAuctionBidPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultBidIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _erc20Token: string,
      _tokenAmount: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumMinPricePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumBidPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
